#!/usr/bin/env python
import sys
import argparse
from collections import defaultdict
from utils import read_ttable
import operator

parser = argparse.ArgumentParser()
parser.add_argument('--test', '-e', default='data/dev+test.input')
parser.add_argument('--input', '-i', default='data/train.input')
parser.add_argument('--ttable', '-t', default='data/ttable')
parser.add_argument('--refs', '-r', default='data/train.refs')
parser.add_argument('--iteration', '-it', default=5)
args = parser.parse_args()

def dot(w, v):
	s = 0.0
	for k in set(w.keys()) & set(v.keys()):
		s += w[k] * v[k]
	return s
def sub(w, v):
	new_dictionary = defaultdict(float)
	for k in set(w.keys()) & set(v.keys()):
		new_dictionary[k] = w[k] - v[k]
	return new_dictionary
def add(w, v):
	new_dictionary = defaultdict(float)
	for k in set(w.keys()) & set(v.keys()):
		new_dictionary[k] = w[k] + v[k]
	return new_dictionary

alpha = 0.1
translation_table = read_ttable(args.ttable)
correct_translations = [x.strip() for x in open(args.refs).readlines()]
num_feats = 0

#creating derivative table
print >> sys.stderr, 'Calculating derivative table...'
derivatives = defaultdict(lambda: defaultdict(float))
for index, line in enumerate(open(args.input)):
	left_context, phrase, right_context = [part.strip() for part in line.decode('utf-8').strip().split('|||')]
	answer_features = translation_table[phrase][correct_translations[index].decode('utf-8')]
	total = answer_features.copy()
	for key, value in total.iteritems():
		total[key] = 0
	for target, features in translation_table[phrase].iteritems():
		if correct_translations[index].decode('utf-8') == target:
			continue
		total = add(total, sub(features, answer_features))
	derivatives[phrase] = total
	sys.stderr.write('%d\r' % index)

#training
print >> sys.stderr, 'Training...'
#w = {'log_prob_tgs': 1.0}
w = answer_features.copy()
for key, value in w.iteritems():
	w[key] = 0
for index in xrange(5):
	for phrase, feats in derivatives.iteritems():
		f = defaultdict(float)
		for key, value in feats.iteritems():
			f[key] = value*alpha
		w = sub(w, f)
	sys.stderr.write('%d\r' % index)

#testing
print >> sys.stderr, 'Printing...'
for index, line in enumerate(open(args.test)):
        left_context, phrase, right_context = [part.strip() for part in line.decode('utf-8').strip().split('|||')]
	candidates = [target for target, features in sorted(translation_table[phrase].iteritems(), key=lambda (t, f): dot(f, w), reverse=True)]
	print ' ||| '.join(candidates).encode('utf-8')
	sys.stderr.write('%d\r' % index)
