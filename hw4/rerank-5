#!/usr/bin/env python
import sys, argparse, random, operator, unicodedata
from collections import defaultdict
from utils import *
from sumy.nlp.stemmers import Stemmer

stemmer = Stemmer('czech')
trees = read_dep_trees('data/train.parses')
parser = argparse.ArgumentParser()
parser.add_argument('--test', '-e', default='data/dev+test.input')
parser.add_argument('--input', '-i', default='data/train.input')
parser.add_argument('--ttable', '-t', default='data/ttable')
parser.add_argument('--refs', '-r', default='data/train.refs')
parser.add_argument('--iterations', '-it', default=5, type=int)
parser.add_argument('--gamma', '-g', default=0.01, type=float)
parser.add_argument('--alpha', '-a', default=0.01, type=float)
args = parser.parse_args()

def dot(w, v):
	return sum(w[k]*v[k] for k in w if k in v)
def sub(w, v):
	new_dictionary = defaultdict(float)
	keys = set(list(w.keys())+list(v.keys()))
	for k in keys:
		if (k in w) and (k in v):
			new_dictionary[k] = w[k] - v[k]
		elif k in w:
			new_dictionary[k] = w[k]
		elif k in v:
			new_dictionary[k] = -v[k]
	return new_dictionary
def add(w, v):
	new_dictionary = defaultdict(float)
	keys = set(list(w.keys())+list(v.keys()))
	for k in keys:
		if (k in w) and (k in v):
			new_dictionary[k] = w[k] + v[k]
		elif k in w:
			new_dictionary[k] = w[k]
		elif k in v:
			new_dictionary[k] = v[k]
	return new_dictionary
def total(w):
	t = 0
	for val in w.values():
		t+=val
	return t
def strip_accents(s):
   return ''.join(c for c in unicodedata.normalize('NFD', s)
                  if unicodedata.category(c) != 'Mn')

translation_table = read_ttable(args.ttable)
correct_translations = [x.strip() for x in open(args.refs).readlines()]
w = {'log_prob_tgs':0, 'log_prob_sgt':0, 'log_lex_prob_tgs':0, 'log_lex_prob_sgt':0}

new_translation_table = translation_table.copy()
print >> sys.stderr, 'Setting up new features...'
for index, line in enumerate(open(args.input)):
	left_context, phrase, right_context = [part.strip() for part in line.decode('utf-8').strip().split('|||')]
	
	rightsplit = right_context.split()
	leftsplit = left_context.split()
	whole_sentence = leftsplit+[phrase]+rightsplit
	phraseInd = whole_sentence.index(phrase)
	dep = trees.next()
	root = dep.roots[0][0]
	POS = dep.tags[phraseInd]

	if leftsplit:
		left = leftsplit[-1]
		left_POS = dep.tags[phraseInd-1]
		if len(leftsplit) > 1:
			left2 = leftsplit[-2]
			left2_POS = dep.tags[phraseInd-2]
		else:
			left2 = "<s>"
			left2_POS = "<s>"			
	else:
		left2 = "<s>"
		left = "<s>"
		left_POS = "<s>"
		left2_POS = "<s>"
	if rightsplit:
		right = rightsplit[0]
		right_POS = dep.tags[phraseInd+1]
		if len(rightsplit) > 1:
			right2 = rightsplit[1]
			right2_POS = dep.tags[phraseInd+2]
		else:
			right2 = "</s>"
			right2_POS = "</s>"			
	else:
		right2 = "</s>"
		right = "</s>"
		right_POS = "</s>"
		right2_POS = "</s>"

	for target in translation_table[phrase].keys():
		#next and prev 1
		string = phrase+":"+target+":"+left
		new_translation_table[phrase][target][string] = 1
		string = phrase+":"+target+":"+left_POS
		new_translation_table[phrase][target][string] = 1
	
		string = phrase+":"+target+":"+right
		new_translation_table[phrase][target][string] = 1
		string = phrase+":"+target+":"+right_POS
		new_translation_table[phrase][target][string] = 1

		#root
		new_translation_table[phrase][target][whole_sentence[root]] = 1
		#POS of phrase
		new_translation_table[phrase][target][POS] = 1
		
		#next and prev 2
		string = phrase+":"+target+":"+left2+left
		new_translation_table[phrase][target][string] = 1
	
		string = phrase+":"+target+":"+right+right2
		new_translation_table[phrase][target][string] = 1
	sys.stderr.write('%d\r' % index)

translation_table = new_translation_table
del(new_translation_table)

#training
print >> sys.stderr, 'Training...'
for i in xrange(args.iterations):
	for index, line in enumerate(open(args.input)):
		left_context, phrase, right_context = [part.strip() for part in line.decode('utf-8').strip().split('|||')]
		answer_features = translation_table[phrase][correct_translations[index].decode('utf-8')]
		for target, features in translation_table[phrase].iteritems():
			if correct_translations[index].decode('utf-8') == target:
				continue
			if (args.gamma - dot(sub(answer_features, features),w) > 0):
				g = sub(features, answer_features)
				f = defaultdict(float)
				for key, value in g.iteritems():
					f[key] = value*args.alpha
				w = sub(w, f)
		sys.stderr.write('%d\r' % index)
	print >> sys.stderr, 'Iteration: '+str(i)

#testing
print >> sys.stderr, 'Printing...'
for index, line in enumerate(open(args.test)):
        left_context, phrase, right_context = [part.strip() for part in line.decode('utf-8').strip().split('|||')]
	candidates = [target for target, features in sorted(translation_table[phrase].iteritems(), key=lambda (t, f): dot(f, w), reverse=True)]
	print ' ||| '.join(candidates).encode('utf-8')
	sys.stderr.write('%d\r' % index)
